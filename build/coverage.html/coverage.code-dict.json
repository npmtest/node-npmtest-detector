{"/home/travis/build/npmtest/node-npmtest-detector/test.js":"/* istanbul instrument in package npmtest_detector */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-detector/lib.npmtest_detector.js":"/* istanbul instrument in package npmtest_detector */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_detector = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_detector = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-detector/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-detector && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_detector */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_detector\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_detector.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        local.assetsDict['/assets.npmtest_detector.rollup.js'] =\n            local.assetsDict['/assets.npmtest_detector.rollup.js'] ||\n            local.fs.readFileSync(\n                // buildCustomOrg-hack\n                local.npmtest_detector.__dirname +\n                    '/lib.npmtest_detector.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-detector/node_modules/detector/lib/node-detector.js":"\"use strict\";\n\nconst Detector = require(\"./detector\");\nconst Rules = require(\"./rules\");\n\nconst detector = new Detector(Rules);\n\nmodule.exports = detector;\n","/home/travis/build/npmtest/node-npmtest-detector/node_modules/detector/lib/detector.js":"\"use strict\";\n\nconst NA_VERSION = \"-1\";\nconst NA = {\n  name: \"na\",\n  version: NA_VERSION,\n};\n\nfunction typeOf(type){\n  return function(object) {\n    return Object.prototype.toString.call(object) === \"[object \" + type + \"]\";\n  };\n}\nconst isString = typeOf(\"String\");\nconst isRegExp = typeOf(\"RegExp\");\nconst isObject = typeOf(\"Object\");\nconst isFunction = typeOf(\"Function\");\n\nfunction each(object, factory){\n  for(let i = 0, l = object.length; i < l; i++){\n    if(factory.call(object, object[i], i) === false){\n      break;\n    }\n  }\n}\n\n// UserAgent Detector.\n// @param {String} ua, userAgent.\n// @param {Object} expression\n// @return {Object}\n//    返回 null 表示当前表达式未匹配成功。\nfunction detect(name, expression, ua) {\n  const expr = isFunction(expression) ? expression.call(null, ua) : expression;\n  if (!expr) { return null; }\n  const info = {\n    name: name,\n    version: NA_VERSION,\n    codename: \"\",\n  };\n  if (expr === true) {\n    return info;\n  }else if(isString(expr)) {\n    if(ua.indexOf(expr) !== -1){\n      return info;\n    }\n  } else if (isObject(expr)) {\n    if(expr.hasOwnProperty(\"version\")){\n      info.version = expr.version;\n    }\n    return info;\n  } else if (isRegExp(expr)) {\n    const m = expr.exec(ua);\n    if (m) {\n      if(m.length >= 2 && m[1]) {\n        info.version = m[1].replace(/_/g, \".\");\n      }else{\n        info.version = NA_VERSION;\n      }\n      return info;\n    }\n  }\n}\n\n// 初始化识别。\nfunction init(ua, patterns, factory, detector){\n  let detected = NA;\n  each(patterns, function(pattern) {\n    const d = detect(pattern[0], pattern[1], ua);\n    if (d) {\n      detected = d;\n      return false;\n    }\n  });\n  factory.call(detector, detected.name, detected.version);\n}\n\n\nclass Detector {\n  constructor (rules) {\n    this._rules = rules;\n  }\n\n  // 解析 UserAgent 字符串\n  // @param {String} ua, userAgent string.\n  // @return {Object}\n  parse (ua) {\n    ua = (ua || \"\").toLowerCase();\n    const d = {};\n\n    init(ua, this._rules.device, function(name, version) {\n      const v = parseFloat(version);\n      d.device = {\n        name: name,\n        version: v,\n        fullVersion: version,\n      };\n      d.device[name] = v;\n    }, d);\n\n    init(ua, this._rules.os, function(name, version){\n      const v = parseFloat(version);\n      d.os = {\n        name: name,\n        version: v,\n        fullVersion: version,\n      };\n      d.os[name] = v;\n    }, d);\n\n    const ieCore = this.IEMode(ua);\n\n    init(ua, this._rules.engine, function(name, version) {\n      let mode = version;\n      // IE 内核的浏览器，修复版本号及兼容模式。\n      if(ieCore){\n        version = ieCore.engineVersion || ieCore.engineMode;\n        mode = ieCore.engineMode;\n      }\n      const v = parseFloat(version);\n      d.engine = {\n        name: name,\n        version: v,\n        fullVersion: version,\n        mode: parseFloat(mode),\n        fullMode: mode,\n        compatible: ieCore ? ieCore.compatible : false,\n      };\n      d.engine[name] = v;\n    }, d);\n\n    init(ua, this._rules.browser, function(name, version) {\n      let mode = version;\n      // IE 内核的浏览器，修复浏览器版本及兼容模式。\n      if(ieCore){\n        // 仅修改 IE 浏览器的版本，其他 IE 内核的版本不修改。\n        if(name === \"ie\"){\n          version = ieCore.browserVersion;\n        }\n        mode = ieCore.browserMode;\n      }\n      const v = parseFloat(version);\n      d.browser = {\n        name: name,\n        version: v,\n        fullVersion: version,\n        mode: parseFloat(mode),\n        fullMode: mode,\n        compatible: ieCore ? ieCore.compatible : false,\n      };\n      d.browser[name] = v;\n    }, d);\n    return d;\n  }\n\n  // 解析使用 Trident 内核的浏览器的 `浏览器模式` 和 `文档模式` 信息。\n  // @param {String} ua, userAgent string.\n  // @return {Object}\n  IEMode (ua) {\n    if(!this._rules.re_msie.test(ua)){ return null; }\n\n    let m;\n    let engineMode;\n    let engineVersion;\n    let browserMode;\n    let browserVersion;\n\n    // IE8 及其以上提供有 Trident 信息，\n    // 默认的兼容模式，UA 中 Trident 版本不发生变化。\n    if(ua.indexOf(\"trident/\") !== -1) {\n      m = /\\btrident\\/([0-9.]+)/.exec(ua);\n      if (m && m.length >= 2) {\n        // 真实引擎版本。\n        engineVersion = m[1];\n        const v_version = m[1].split(\".\");\n        v_version[0] = parseInt(v_version[0], 10) + 4;\n        browserVersion = v_version.join(\".\");\n      }\n    }\n\n    m = this._rules.re_msie.exec(ua);\n    browserMode = m[1];\n    const v_mode = m[1].split(\".\");\n    if (typeof browserVersion === \"undefined\") {\n      browserVersion = browserMode;\n    }\n    v_mode[0] = parseInt(v_mode[0], 10) - 4;\n    engineMode = v_mode.join(\".\");\n    if (typeof engineVersion === \"undefined\") {\n      engineVersion = engineMode;\n    }\n\n    return {\n      browserVersion: browserVersion,\n      browserMode: browserMode,\n      engineVersion: engineVersion,\n      engineMode: engineMode,\n      compatible: engineVersion !== engineMode,\n    };\n  }\n\n}\n\nmodule.exports = Detector;\n","/home/travis/build/npmtest/node-npmtest-detector/node_modules/detector/lib/rules.js":"\"use strict\";\n\nconst WebRules = require(\"./web-rules\");\n\nconst DEVICES = [\n  // [诺亚信](http://www.noain.com.cn/)\n  [\"noain\", /\\bnoain ([a-z0-9]+)/],\n  // TODO: [华为荣耀](http://www.honor.cn/)\n  [\"huawei-honor\", function(ua){\n    if (/\\bhonor/.test(ua)) {\n      return /\\b(honor)[ ]([a-z0-9]+)-([a-z0-9]+)\\b/;\n    } else if (/\\bh\\d+-l\\d+/.test(ua)) {\n      return /\\b(h\\d+-l\\d+)/;\n    }\n  }],\n  // [乐Phone](http://www.lephonemall.com/)\n  [\"lephone\", /\\blephone[_\\- ]+([a-z0-9]+)/],\n  // [华硕](https://www.asus.com.cn/Phones/)\n  [\"asus\", /\\basus_([a-z0-9]+)\\b/],\n  [\"alcatel\", /\\balcatel\\b/],\n  [\"一加\", /\\ba0001 build/],\n  [\"蓝米\", /\\blanmi[_\\-]([a-z0-9]+)\\b/],\n  [\"E派\", /\\bebest[_\\- ]([a-z0-9]+)\\b/],\n  // HIKe\n  [\"hike\", /\\bhike[_\\- ]([a-z0-9]+)\\b/],\n  [\"qmi\", /\\bqmi build/],\n  [\"优米\", /\\bumi[\\-]?([a-z0-9]+)/],\n  [\"嘉源\", /\\bcayon ([a-z0-9]+)/],\n  [\"intki\", /\\bintki[_\\- ]([a-z0-9]+)/],\n  [\"星语\", /\\bxy[- ]([a-z0-9]+)/],\n  [\"欧奇\", /\\boku([a-z0-9]+)/],\n  [\"海派\", /\\bhaipai ([a-z0-9 ]+) build/],\n  [\"广信\",\n    function(ua) {\n      if (/\\bef98 build/.test(ua)) {\n        return /\\bef98 build/;\n      }\n      return /\\bkingsun[_\\- ]([a-z0-9]+)\\b/;\n    },\n  ],\n\n  [\"神州\", /\\bhasee ([a-z0-9 ]+) build\\b/],\n  [\"青橙\", /\\bgo ([a-z0-9\\-]+) build\\b/],\n  [\"海信\", function(ua) {\n    if (/\\bhs[ \\-]+([a-z0-9]+)/.test(ua)) {\n      return /\\bhs[ \\-]+([a-z0-9]+)/;\n    } else if (/ (e601m|t980) build/.test(ua)) {\n      return / (e601m|t980) build/;\n    }\n  }],\n  [\"金立\",\n    function(ua) {\n      if (/\\b(?:gn|gionee)[ \\-_]?([a-z0-9]+)[ \\/]+/.test(ua)) {\n        return /\\b(?:gn|gionee)[ \\-_]?([a-z0-9]+)[ \\/]+/;\n      } else if (/; a5 build/.test(ua)) {\n        return /; (a5) build/;\n      } else if (/; e6 build/.test(ua)) {\n        return /; (e6) build/;\n      }\n    },\n  ],\n\n  [\"eton\", /\\beton ([a-z0-9]+)/],\n  [\"bohp\", /\\bbohp[_\\- ]([a-z0-9]+)/],\n  [\"小杨树\", /; (mm110\\d) build/],\n  [\"语信\",\n    function(ua) {\n      if (/\\byusun ([a-z0-9]+)/.test(ua)) {\n        return /\\byusun ([a-z0-9]+)/;\n      } else if (/\\bla\\d-([a-z0-9]+) build/.test(ua)) {\n        return /\\b(la\\d-([a-z0-9]+)) build/;\n      } else if (/\\bt21 build/.test(ua)) {\n        return /\\b(t21) build/;\n      }\n    },\n  ],\n  [\"nubia\", /\\b(z7|nx\\d{3}[a|j]) build/],\n  [\"爱讯达\", /\\bik build/],\n  [\"寰宇通\", /\\bxy\\-a3/],\n  [\"mofut\", /\\bmofut ([a-z0-9]+) build/],\n  // InFocus\n  [\"infocus\", /\\binfocus ([a-z0-9]+) build/],\n  [\"大唐\",\n    function(ua) {\n      if (/\\b(i318)_t3 build/.test(ua)) {\n        return /\\b(i318)_t3 build/;\n      } else if (/\\bdatang ([a-z0-9]+)/.test(ua)) {\n        return /\\bdatang ([a-z0-9]+)/;\n      }\n    },\n  ],\n  [\"邦华\", /\\bboway ([a-z0-9]+)/],\n  [\"天迈\", /\\bt\\-smart ([a-z0-9]+)/],\n  [\"大显\", /\\bht7100/],\n  [\"博瑞\", /\\bbror ([a-z0-9]+)/],\n  [\"lingwin\",\n    function(ua) {\n      if (/\\blingwin ([a-z0-9]+)/.test(ua)) {\n        return /\\blingwin ([a-z0-9]+)/;\n      }\n      return /lingwin /;\n    },\n  ],\n  [\"iusai\", /\\biusai ([a-z0-9]+)/],\n  [\"波导\",\n    function(ua) {\n      if (/\\bbird ([a-z0-9]+)/.test(ua)) {\n        return /\\bbird ([a-z0-9]+)/;\n      } else if (/\\bdoeasy ([a-z0-9]+) build/.test(ua)) {\n        return /\\bdoeasy ([a-z0-9]+) build/;\n      }\n    },\n  ],\n  [\"德赛\", /\\bdesay ([a-z0-9]+)/],\n  [\"蓝魔\", /\\bramos([a-z0-9]+)/],\n  [\"美图\", /\\bmeitu(\\d+) build/],\n  [\"opsson\", /\\bopsson ([a-z0-9]+)/],\n  [\"benwee\", /\\bbenwee ([a-z0-9]+)/],\n  [\"hosin\", /\\bhosin ([a-z0-9]+)/],\n  [\"smartisan\",\n    function(ua) {\n      if (/\\bsmartisan\\b/.test(ua)) {\n        return true;\n      }\n      return /sm\\-?(\\d{3,})/;\n    }\n  ],\n  [\"ephone\", /ephone ([a-z0-9]+)/],\n  [\"佰事讯\", /\\b(wx9) build/],\n  [\"newman\", /; newman ([a-z0-9]+) build/],\n  // 康佳\n  [\"konka\",\n    function(ua) {\n      if (/ (l823) build/.test(ua)) {\n        return / (l823) build/;\n      } else if (/\\bkonka[_\\-]([a-z0-9]+)/.test(ua)) {\n        return /\\bkonka[_\\-]([a-z0-9]+)/;\n      }\n    },\n  ],\n  [\"haier\",\n    function(ua) {\n      if (/\\b(?:haier|ht)[_-]([a-z0-9\\-]+)\\b/.test(ua)) {\n        return /\\b(?:haier|ht)[_-]([a-z0-9\\-]+)\\b/;\n      }\n    },\n  ],\n  [\"moto\",\n    function(ua) {\n      const RE_MOTO = /\\bmot[\\-]([a-z0-9]+)/;\n      if (RE_MOTO.test(ua)) {\n        return RE_MOTO;\n      } else {\n        return / (xt\\d+) build/;\n      }\n    },\n  ],\n  // TCL\n  [\"tcl\",\n    function(ua) {\n      if (/\\btcl[ \\-]([a-z0-9]+)/.test(ua)) {\n        return /\\btcl[ \\-]([a-z0-9]+)/;\n      } else if (/\\btcl([a-z0-9]+)/.test(ua)) {\n        return /\\btcl([a-z0-9]+)/;\n      }\n    },\n  ],\n  [\"天语\",\n    function(ua) {\n      if (ua.indexOf(\"k-touch \") !== -1) {\n        return /\\bk\\-touch ([a-z0-9 +]+)(?:build|\\))/;\n      } else if (ua.indexOf(\"k-touch_\") !== -1) {\n        return /\\bk-touch_(a-z0-9)+/;\n      } else if (/k[ \\-]touch/.test(ua)) {\n        return /k[ \\-]touch ([a-z0-9]+)\\b/;\n      }\n    },\n  ],\n  [\"doov\", /\\bdoov[ _]([a-z0-9]+)/],\n  [\"天时达\",\n    function(ua) {\n      if (/\\bts(\\d+)/.test(ua)) {\n        return /\\bts(\\d+)/;\n      } else if (/\\b(t5688) /.test(ua)) {\n        return /\\b(t5688) /;\n      }\n    },\n  ],\n];\n\nconst OS = [\n  [\"smartisanos\",\n    function(ua) {\n      const m = /\\bsmartisan os \\- ([\\d.]+)/.exec(ua);\n      if (m) {\n        return { version: m[1] };\n      }\n      return /sm\\-?\\d{3,}/;\n    }\n  ],\n  [\"meego\", /\\bmeego\\b/],\n];\n\nconst BROWSER = [\n  [\"baiduboxapp\",\n    function(ua) {\n      let back = 0;\n      let a;\n      if (/ baiduboxapp\\//i.test(ua)) {\n        if (a = /([\\d+.]+)_(?:diordna|enohpi)_/.exec(ua)) {\n          a = a[1].split(\".\");\n          back = a.reverse().join(\".\");\n        } else if ((a = /baiduboxapp\\/([\\d+.]+)/.exec(ua))) {\n          back = a[1];\n        }\n\n        return {\n          version: back,\n        };\n      }\n      return false;\n    },\n  ],\n  [\"googlebot\", /\\bgooglebot\\/([0-9.]+)/],\n  // 百度搜索引擎爬虫：无线、网页搜索\n  // http://help.baidu.com/question?prod_en=master&class=498&id=1000550\n  [\"baiduspider\", /\\bbaiduspider\\b(?:\\/([0-9.]+))?/],\n  // 百度搜索引擎爬虫：图片搜索\n  [\"baiduspider-image\", /\\bbaiduspider\\-image\\b(?:\\/([0-9.]+))?/],\n  // 百度搜索引擎爬虫：视频搜索\n  [\"baiduspider-video\", /\\bbaiduspider\\-video\\b(?:\\/([0-9.]+))?/],\n  // 百度搜索引擎爬虫：新闻搜索\n  [\"baiduspider-news\", /\\bbaiduspider\\-news\\b(?:\\/([0-9.]+))?/],\n  // 百度搜索引擎爬虫：百度收藏\n  [\"baiduspider-favo\", /\\bbaiduspider\\-favo\\b(?:\\/([0-9.]+))?/],\n  // 百度搜索引擎爬虫：百度联盟\n  [\"baiduspider-cpro\", /\\bbaiduspider\\-cpro\\b(?:\\/([0-9.]+))?/],\n  // 百度搜索引擎爬虫：商务搜索\n  [\"baiduspider-ads\", /\\bbaiduspider\\-ads\\b(?:\\/([0-9.]+))?/],\n  [\"bingbot\", /\\bbingbot\\/([0-9.]+)/],\n  [\"msnbot\", /\\bmsnbot-media ?\\/([0-9.a-z]+)/],\n  [\"nuhkbot\", /\\bnuhk\\/([0-9.]+)/],\n  //[\"yammybot\", /\\byammybot\\b/],\n  //[\"openbot\", /\\bopenbot\\b/],\n  //[\"slurpbot\", /\\bslurp\\b/],\n\n  // Alexa ia_archiver.\n  [\"alexabot\", /\\bia_archiver\\b|\\balexabot\\/([0-9.]+)/],\n  [\"curl\", /\\bcurl\\/([0-9.]+)/],\n];\n\nconst ENGINE = [];\n\n\nmodule.exports = {\n  device: DEVICES.concat(WebRules.device),\n  os: OS.concat(WebRules.os),\n  browser: BROWSER.concat(WebRules.browser),\n  engine: ENGINE.concat(WebRules.engine),\n  re_msie: WebRules.re_msie,\n};\n","/home/travis/build/npmtest/node-npmtest-detector/node_modules/detector/lib/web-rules.js":"\"use strict\";\n\nconst win = typeof window === \"undefined\" ? global : window;\nconst external = win.external;\nconst re_msie = /\\b(?:msie |ie |trident\\/[0-9].*rv[ :])([0-9.]+)/;\nconst re_blackberry_10 = /\\bbb10\\b.+?\\bversion\\/([\\d.]+)/;\nconst re_blackberry_6_7 = /\\bblackberry\\b.+\\bversion\\/([\\d.]+)/;\nconst re_blackberry_4_5 = /\\bblackberry\\d+\\/([\\d.]+)/;\n\nconst NA_VERSION = \"-1\";\n\n// 硬件设备信息识别表达式。\n// 使用数组可以按优先级排序。\nconst DEVICES = [\n  [\"nokia\", function(ua){\n    // 不能将两个表达式合并，因为可能出现 \"nokia; nokia 960\"\n    // 这种情况下会优先识别出 nokia/-1\n    if(ua.indexOf(\"nokia \") !== -1){\n      return /\\bnokia ([0-9]+)?/;\n    }else{\n      return /\\bnokia([a-z0-9]+)?/;\n    }\n  }],\n  // 三星有 Android 和 WP 设备。\n  [\"samsung\", function(ua){\n    if(ua.indexOf(\"samsung\") !== -1){\n      return /\\bsamsung(?:[ \\-](?:sgh|gt|sm))?-([a-z0-9]+)/;\n    }else{\n      return /\\b(?:sgh|sch|gt|sm)-([a-z0-9]+)/;\n    }\n  }],\n  [\"wp\", function(ua){\n    return ua.indexOf(\"windows phone \") !== -1 ||\n      ua.indexOf(\"xblwp\") !== -1 ||\n      ua.indexOf(\"zunewp\") !== -1 ||\n      ua.indexOf(\"windows ce\") !== -1;\n  }],\n  [\"pc\", \"windows\"],\n  [\"ipad\", \"ipad\"],\n  // ipod 规则应置于 iphone 之前。\n  [\"ipod\", \"ipod\"],\n  [\"iphone\", /\\biphone\\b|\\biph(\\d)/],\n  [\"mac\", \"macintosh\"],\n  // 小米\n  [\"mi\", /\\bmi[ \\-]?([a-z0-9 ]+(?= build|\\)))/],\n  // 红米\n  [\"hongmi\", /\\bhm[ \\-]?([a-z0-9]+)/],\n  [\"aliyun\", /\\baliyunos\\b(?:[\\-](\\d+))?/],\n  [\"meizu\", function(ua) {\n    return ua.indexOf(\"meizu\") >= 0 ?\n      /\\bmeizu[\\/ ]([a-z0-9]+)\\b/\n      :\n      /\\bm([0-9cx]{1,4})\\b/;\n  }],\n  [\"nexus\", /\\bnexus ([0-9s.]+)/],\n  [\"huawei\", function(ua) {\n    const re_mediapad = /\\bmediapad (.+?)(?= build\\/huaweimediapad\\b)/;\n    if(ua.indexOf(\"huawei-huawei\") !== -1){\n      return /\\bhuawei\\-huawei\\-([a-z0-9\\-]+)/;\n    }else if(re_mediapad.test(ua)){\n      return re_mediapad;\n    }else{\n      return /\\bhuawei[ _\\-]?([a-z0-9]+)/;\n    }\n  }],\n  [\"lenovo\", function(ua){\n    if(ua.indexOf(\"lenovo-lenovo\") !== -1){\n      return /\\blenovo\\-lenovo[ \\-]([a-z0-9]+)/;\n    }else{\n      return /\\blenovo[ \\-]?([a-z0-9]+)/;\n    }\n  }],\n  // 中兴\n  [\"zte\", function(ua){\n    if(/\\bzte\\-[tu]/.test(ua)){\n      return /\\bzte-[tu][ _\\-]?([a-su-z0-9\\+]+)/;\n    }else{\n      return /\\bzte[ _\\-]?([a-su-z0-9\\+]+)/;\n    }\n  }],\n  // 步步高\n  [\"vivo\", /\\bvivo(?: ([a-z0-9]+))?/],\n  [\"htc\", function(ua){\n    if(/\\bhtc[a-z0-9 _\\-]+(?= build\\b)/.test(ua)){\n      return /\\bhtc[ _\\-]?([a-z0-9 ]+(?= build))/;\n    }else{\n      return /\\bhtc[ _\\-]?([a-z0-9 ]+)/;\n    }\n  }],\n  [\"oppo\", /\\boppo[_]([a-z0-9]+)/],\n  [\"konka\", /\\bkonka[_\\-]([a-z0-9]+)/],\n  [\"sonyericsson\", /\\bmt([a-z0-9]+)/],\n  [\"coolpad\", /\\bcoolpad[_ ]?([a-z0-9]+)/],\n  [\"lg\", /\\blg[\\-]([a-z0-9]+)/],\n  [\"android\", /\\bandroid\\b|\\badr\\b/],\n  [\"blackberry\", function(ua){\n    if (ua.indexOf(\"blackberry\") >= 0) {\n      return /\\bblackberry\\s?(\\d+)/;\n    }\n    return \"bb10\";\n  }],\n];\n\n// 操作系统信息识别表达式\nconst OS = [\n  [\"wp\", function(ua){\n    if(ua.indexOf(\"windows phone \") !== -1){\n      return /\\bwindows phone (?:os )?([0-9.]+)/;\n    }else if(ua.indexOf(\"xblwp\") !== -1){\n      return /\\bxblwp([0-9.]+)/;\n    }else if(ua.indexOf(\"zunewp\") !== -1){\n      return /\\bzunewp([0-9.]+)/;\n    }\n    return \"windows phone\";\n  }],\n  [\"windows\", /\\bwindows nt ([0-9.]+)/],\n  [\"macosx\", /\\bmac os x ([0-9._]+)/],\n  [\"ios\", function(ua){\n    if(/\\bcpu(?: iphone)? os /.test(ua)){\n      return /\\bcpu(?: iphone)? os ([0-9._]+)/;\n    }else if(ua.indexOf(\"iph os \") !== -1){\n      return /\\biph os ([0-9_]+)/;\n    }else{\n      return /\\bios\\b/;\n    }\n  }],\n  [\"yunos\", /\\baliyunos ([0-9.]+)/],\n  [\"android\", function(ua){\n    if(ua.indexOf(\"android\") >= 0){\n      return /\\bandroid[ \\/-]?([0-9.x]+)?/;\n    }else if(ua.indexOf(\"adr\") >= 0){\n      if(ua.indexOf(\"mqqbrowser\") >= 0){\n        return /\\badr[ ]\\(linux; u; ([0-9.]+)?/;\n      }else{\n        return /\\badr(?:[ ]([0-9.]+))?/;\n      }\n    }\n    return \"android\";\n    //return /\\b(?:android|\\badr)(?:[\\/\\- ](?:\\(linux; u; )?)?([0-9.x]+)?/;\n  }],\n  [\"chromeos\", /\\bcros i686 ([0-9.]+)/],\n  [\"linux\", \"linux\"],\n  [\"windowsce\", /\\bwindows ce(?: ([0-9.]+))?/],\n  [\"symbian\", /\\bsymbian(?:os)?\\/([0-9.]+)/],\n  [\"blackberry\", function(ua){\n    const m = ua.match(re_blackberry_10) ||\n      ua.match(re_blackberry_6_7) ||\n      ua.match(re_blackberry_4_5);\n    return m ? {version: m[1]} : \"blackberry\";\n  }],\n];\n\n// 针对同源的 TheWorld 和 360 的 external 对象进行检测。\n// @param {String} key, 关键字，用于检测浏览器的安装路径中出现的关键字。\n// @return {Undefined,Boolean,Object} 返回 undefined 或 false 表示检测未命中。\nfunction checkTW360External(key){\n  if(!external){ return; } // return undefined.\n  try{\n    //        360安装路径：\n    //        C:%5CPROGRA~1%5C360%5C360se3%5C360SE.exe\n    const runpath = external.twGetRunPath.toLowerCase();\n    // 360SE 3.x ~ 5.x support.\n    // 暴露的 external.twGetVersion 和 external.twGetSecurityID 均为 undefined。\n    // 因此只能用 try/catch 而无法使用特性判断。\n    const security = external.twGetSecurityID(win);\n    const version = external.twGetVersion(security);\n\n    if (runpath && runpath.indexOf(key) === -1) { return false; }\n    if (version){return {version: version}; }\n  }catch(ex){ /* */ }\n}\n\nconst ENGINE = [\n  [\"edgehtml\", /edge\\/([0-9.]+)/],\n  [\"trident\", re_msie],\n  [\"blink\", function(){\n    return \"chrome\" in win && \"CSS\" in win && /\\bapplewebkit[\\/]?([0-9.+]+)/;\n  }],\n  [\"webkit\", /\\bapplewebkit[\\/]?([0-9.+]+)/],\n  [\"gecko\", function(ua){\n    const match = ua.match(/\\brv:([\\d\\w.]+).*\\bgecko\\/(\\d+)/);\n    if (match) {\n      return {\n        version: match[1] + \".\" + match[2],\n      };\n    }\n  }],\n  [\"presto\", /\\bpresto\\/([0-9.]+)/],\n  [\"androidwebkit\", /\\bandroidwebkit\\/([0-9.]+)/],\n  [\"coolpadwebkit\", /\\bcoolpadwebkit\\/([0-9.]+)/],\n  [\"u2\", /\\bu2\\/([0-9.]+)/],\n  [\"u3\", /\\bu3\\/([0-9.]+)/],\n];\nconst BROWSER = [\n  // Microsoft Edge Browser, Default browser in Windows 10.\n  [\"edge\", /edge\\/([0-9.]+)/],\n  // Sogou.\n  [\"sogou\", function(ua){\n    if (ua.indexOf(\"sogoumobilebrowser\") >= 0) {\n      return /sogoumobilebrowser\\/([0-9.]+)/;\n    } else if (ua.indexOf(\"sogoumse\") >= 0){\n      return true;\n    }\n    return / se ([0-9.x]+)/;\n  }],\n  // TheWorld (世界之窗)\n  // 由于裙带关系，TheWorld API 与 360 高度重合。\n  // 只能通过 UA 和程序安装路径中的应用程序名来区分。\n  // TheWorld 的 UA 比 360 更靠谱，所有将 TheWorld 的规则放置到 360 之前。\n  [\"theworld\", function(){\n    const x = checkTW360External(\"theworld\");\n    if(typeof x !== \"undefined\"){ return x; }\n    return /theworld(?: ([\\d.])+)?/;\n  }],\n  // 360SE, 360EE.\n  [\"360\", function(ua) {\n    const x = checkTW360External(\"360se\");\n    if(typeof x !== \"undefined\"){ return x; }\n    if(ua.indexOf(\"360 aphone browser\") !== -1){\n      return /\\b360 aphone browser \\(([^\\)]+)\\)/;\n    }\n    return /\\b360(?:se|ee|chrome|browser)\\b/;\n  }],\n  // Maxthon\n  [\"maxthon\", function(){\n    try{\n      if(external && (external.mxVersion || external.max_version)){\n        return {\n          version: external.mxVersion || external.max_version,\n        };\n      }\n    }catch(ex){ /* */ }\n    return /\\b(?:maxthon|mxbrowser)(?:[ \\/]([0-9.]+))?/;\n  }],\n  [\"micromessenger\", /\\bmicromessenger\\/([\\d.]+)/],\n  [\"qq\", /\\bm?qqbrowser\\/([0-9.]+)/],\n  [\"green\", \"greenbrowser\"],\n  [\"tt\", /\\btencenttraveler ([0-9.]+)/],\n  [\"liebao\", function(ua){\n    if (ua.indexOf(\"liebaofast\") >= 0){\n      return /\\bliebaofast\\/([0-9.]+)/;\n    }\n    if(ua.indexOf(\"lbbrowser\") === -1){ return false; }\n    let version;\n    try{\n      if(external && external.LiebaoGetVersion){\n        version = external.LiebaoGetVersion();\n      }\n    }catch(ex){ /* */ }\n    return {\n      version: version || NA_VERSION,\n    };\n  }],\n  [\"tao\", /\\btaobrowser\\/([0-9.]+)/],\n  [\"coolnovo\", /\\bcoolnovo\\/([0-9.]+)/],\n  [\"saayaa\", \"saayaa\"],\n  // 有基于 Chromniun 的急速模式和基于 IE 的兼容模式。必须在 IE 的规则之前。\n  [\"baidu\", /\\b(?:ba?idubrowser|baiduhd)[ \\/]([0-9.x]+)/],\n  // 后面会做修复版本号，这里只要能识别是 IE 即可。\n  [\"ie\", re_msie],\n  [\"mi\", /\\bmiuibrowser\\/([0-9.]+)/],\n  // Opera 15 之后开始使用 Chromniun 内核，需要放在 Chrome 的规则之前。\n  [\"opera\", function(ua){\n    const re_opera_old = /\\bopera.+version\\/([0-9.ab]+)/;\n    const re_opera_new = /\\bopr\\/([0-9.]+)/;\n    return re_opera_old.test(ua) ? re_opera_old : re_opera_new;\n  }],\n  [\"oupeng\", /\\boupeng\\/([0-9.]+)/],\n  [\"yandex\", /yabrowser\\/([0-9.]+)/],\n  // 支付宝手机客户端\n  [\"ali-ap\", function(ua){\n    if(ua.indexOf(\"aliapp\") > 0){\n      return /\\baliapp\\(ap\\/([0-9.]+)\\)/;\n    }else{\n      return /\\balipayclient\\/([0-9.]+)\\b/;\n    }\n  }],\n  // 支付宝平板客户端\n  [\"ali-ap-pd\", /\\baliapp\\(ap-pd\\/([0-9.]+)\\)/],\n  // 支付宝商户客户端\n  [\"ali-am\", /\\baliapp\\(am\\/([0-9.]+)\\)/],\n  // 淘宝手机客户端\n  [\"ali-tb\", /\\baliapp\\(tb\\/([0-9.]+)\\)/],\n  // 淘宝平板客户端\n  [\"ali-tb-pd\", /\\baliapp\\(tb-pd\\/([0-9.]+)\\)/],\n  // 天猫手机客户端\n  [\"ali-tm\", /\\baliapp\\(tm\\/([0-9.]+)\\)/],\n  // 天猫平板客户端\n  [\"ali-tm-pd\", /\\baliapp\\(tm-pd\\/([0-9.]+)\\)/],\n  // UC 浏览器，可能会被识别为 Android 浏览器，规则需要前置。\n  // UC 桌面版浏览器携带 Chrome 信息，需要放在 Chrome 之前。\n  [\"uc\", function(ua){\n    if(ua.indexOf(\"ucbrowser/\") >= 0){\n      return /\\bucbrowser\\/([0-9.]+)/;\n    } else if(ua.indexOf(\"ubrowser/\") >= 0){\n      return /\\bubrowser\\/([0-9.]+)/;\n    }else if(/\\buc\\/[0-9]/.test(ua)){\n      return /\\buc\\/([0-9.]+)/;\n    }else if(ua.indexOf(\"ucweb\") >= 0){\n      // `ucweb/2.0` is compony info.\n      // `UCWEB8.7.2.214/145/800` is browser info.\n      return /\\bucweb([0-9.]+)?/;\n    }else{\n      return /\\b(?:ucbrowser|uc)\\b/;\n    }\n  }],\n  [\"chrome\", / (?:chrome|crios|crmo)\\/([0-9.]+)/],\n  // Android 默认浏览器。该规则需要在 safari 之前。\n  [\"android\", function(ua){\n    if(ua.indexOf(\"android\") === -1){ return; }\n    return /\\bversion\\/([0-9.]+(?: beta)?)/;\n  }],\n  [\"blackberry\", function(ua){\n    const m = ua.match(re_blackberry_10) ||\n      ua.match(re_blackberry_6_7) ||\n      ua.match(re_blackberry_4_5);\n    return m ? {version: m[1]} : \"blackberry\";\n  }],\n  [\"safari\", /\\bversion\\/([0-9.]+(?: beta)?)(?: mobile(?:\\/[a-z0-9]+)?)? safari\\//],\n  // 如果不能被识别为 Safari，则猜测是 WebView。\n  [\"webview\", /\\bcpu(?: iphone)? os (?:[0-9._]+).+\\bapplewebkit\\b/],\n  [\"firefox\", /\\bfirefox\\/([0-9.ab]+)/],\n  [\"nokia\", /\\bnokiabrowser\\/([0-9.]+)/],\n];\n\nmodule.exports = {\n  device: DEVICES,\n  os: OS,\n  browser: BROWSER,\n  engine: ENGINE,\n  re_msie: re_msie,\n};\n","/home/travis/build/npmtest/node-npmtest-detector/node_modules/detector/lib/web-detector.js":"\"use strict\";\n\nconst Detector = require(\"./detector\");\nconst WebRules = require(\"./web-rules\");\n\nconst userAgent = navigator.userAgent || \"\";\n//const platform = navigator.platform || \"\";\nconst appVersion = navigator.appVersion || \"\";\nconst vendor = navigator.vendor || \"\";\nconst ua = userAgent + \" \" + appVersion + \" \" + vendor;\n\nconst detector = new Detector(WebRules);\n\n// 解析使用 Trident 内核的浏览器的 `浏览器模式` 和 `文档模式` 信息。\n// @param {String} ua, userAgent string.\n// @return {Object}\nfunction IEMode(ua){\n  if(!WebRules.re_msie.test(ua)){ return null; }\n\n  let m;\n  let engineMode;\n  let engineVersion;\n  let browserMode;\n  let browserVersion;\n\n  // IE8 及其以上提供有 Trident 信息，\n  // 默认的兼容模式，UA 中 Trident 版本不发生变化。\n  if(ua.indexOf(\"trident/\") !== -1){\n    m = /\\btrident\\/([0-9.]+)/.exec(ua);\n    if (m && m.length >= 2) {\n      // 真实引擎版本。\n      engineVersion = m[1];\n      const v_version = m[1].split(\".\");\n      v_version[0] = parseInt(v_version[0], 10) + 4;\n      browserVersion = v_version.join(\".\");\n    }\n  }\n\n  m = WebRules.re_msie.exec(ua);\n  browserMode = m[1];\n  const v_mode = m[1].split(\".\");\n  if (typeof browserVersion === \"undefined\") {\n    browserVersion = browserMode;\n  }\n  v_mode[0] = parseInt(v_mode[0], 10) - 4;\n  engineMode = v_mode.join(\".\");\n  if (typeof engineVersion === \"undefined\") {\n    engineVersion = engineMode;\n  }\n\n  return {\n    browserVersion: browserVersion,\n    browserMode: browserMode,\n    engineVersion: engineVersion,\n    engineMode: engineMode,\n    compatible: engineVersion !== engineMode,\n  };\n}\n\nfunction WebParse (ua) {\n  const d = detector.parse(ua);\n\n  const ieCore = IEMode(ua);\n\n  // IE 内核的浏览器，修复版本号及兼容模式。\n  if(ieCore) {\n    const engineName = d.engine.name;\n    const engineVersion = ieCore.engineVersion || ieCore.engineMode;\n    const ve = parseFloat(engineVersion);\n    const engineMode = ieCore.engineMode;\n\n    d.engine = {\n      name: engineName,\n      version: ve,\n      fullVersion: engineVersion,\n      mode: parseFloat(engineMode),\n      fullMode: engineMode,\n      compatible: ieCore ? ieCore.compatible : false,\n    };\n    d.engine[d.engine.name] = ve;\n\n    const browserName = d.browser.name;\n    // IE 内核的浏览器，修复浏览器版本及兼容模式。\n    // 仅修改 IE 浏览器的版本，其他 IE 内核的版本不修改。\n    let browserVersion = d.browser.fullVersion;\n    if(browserName === \"ie\"){\n      browserVersion = ieCore.browserVersion;\n    }\n    const browserMode = ieCore.browserMode;\n    const vb = parseFloat(browserVersion);\n    d.browser = {\n      name: browserName,\n      version: vb,\n      fullVersion: browserVersion,\n      mode: parseFloat(browserMode),\n      fullMode: browserMode,\n      compatible: ieCore ? ieCore.compatible : false,\n    };\n    d.browser[browserName] = vb;\n  }\n  return d;\n}\n\nconst Tan = WebParse(ua);\nTan.parse = WebParse;\nmodule.exports = Tan;\n","/home/travis/build/npmtest/node-npmtest-detector/node_modules/detector/web/web-detector.js":"\"use strict\";\n\nvar Detector = require(\"./detector\");\nvar WebRules = require(\"./web-rules\");\n\nvar userAgent = navigator.userAgent || \"\";\n//const platform = navigator.platform || \"\";\nvar appVersion = navigator.appVersion || \"\";\nvar vendor = navigator.vendor || \"\";\nvar ua = userAgent + \" \" + appVersion + \" \" + vendor;\n\nvar detector = new Detector(WebRules);\n\n// 解析使用 Trident 内核的浏览器的 `浏览器模式` 和 `文档模式` 信息。\n// @param {String} ua, userAgent string.\n// @return {Object}\nfunction IEMode(ua) {\n  if (!WebRules.re_msie.test(ua)) {\n    return null;\n  }\n\n  var m = void 0;\n  var engineMode = void 0;\n  var engineVersion = void 0;\n  var browserMode = void 0;\n  var browserVersion = void 0;\n\n  // IE8 及其以上提供有 Trident 信息，\n  // 默认的兼容模式，UA 中 Trident 版本不发生变化。\n  if (ua.indexOf(\"trident/\") !== -1) {\n    m = /\\btrident\\/([0-9.]+)/.exec(ua);\n    if (m && m.length >= 2) {\n      // 真实引擎版本。\n      engineVersion = m[1];\n      var v_version = m[1].split(\".\");\n      v_version[0] = parseInt(v_version[0], 10) + 4;\n      browserVersion = v_version.join(\".\");\n    }\n  }\n\n  m = WebRules.re_msie.exec(ua);\n  browserMode = m[1];\n  var v_mode = m[1].split(\".\");\n  if (typeof browserVersion === \"undefined\") {\n    browserVersion = browserMode;\n  }\n  v_mode[0] = parseInt(v_mode[0], 10) - 4;\n  engineMode = v_mode.join(\".\");\n  if (typeof engineVersion === \"undefined\") {\n    engineVersion = engineMode;\n  }\n\n  return {\n    browserVersion: browserVersion,\n    browserMode: browserMode,\n    engineVersion: engineVersion,\n    engineMode: engineMode,\n    compatible: engineVersion !== engineMode\n  };\n}\n\nfunction WebParse(ua) {\n  var d = detector.parse(ua);\n\n  var ieCore = IEMode(ua);\n\n  // IE 内核的浏览器，修复版本号及兼容模式。\n  if (ieCore) {\n    var engineName = d.engine.name;\n    var engineVersion = ieCore.engineVersion || ieCore.engineMode;\n    var ve = parseFloat(engineVersion);\n    var engineMode = ieCore.engineMode;\n\n    d.engine = {\n      name: engineName,\n      version: ve,\n      fullVersion: engineVersion,\n      mode: parseFloat(engineMode),\n      fullMode: engineMode,\n      compatible: ieCore ? ieCore.compatible : false\n    };\n    d.engine[d.engine.name] = ve;\n\n    var browserName = d.browser.name;\n    // IE 内核的浏览器，修复浏览器版本及兼容模式。\n    // 仅修改 IE 浏览器的版本，其他 IE 内核的版本不修改。\n    var browserVersion = d.browser.fullVersion;\n    if (browserName === \"ie\") {\n      browserVersion = ieCore.browserVersion;\n    }\n    var browserMode = ieCore.browserMode;\n    var vb = parseFloat(browserVersion);\n    d.browser = {\n      name: browserName,\n      version: vb,\n      fullVersion: browserVersion,\n      mode: parseFloat(browserMode),\n      fullMode: browserMode,\n      compatible: ieCore ? ieCore.compatible : false\n    };\n    d.browser[browserName] = vb;\n  }\n  return d;\n}\n\nvar Tan = WebParse(ua);\nTan.parse = WebParse;\nmodule.exports = Tan;","/home/travis/build/npmtest/node-npmtest-detector/node_modules/detector/web/detector.js":"\"use strict\";\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar NA_VERSION = \"-1\";\nvar NA = {\n  name: \"na\",\n  version: NA_VERSION\n};\n\nfunction typeOf(type) {\n  return function (object) {\n    return Object.prototype.toString.call(object) === \"[object \" + type + \"]\";\n  };\n}\nvar isString = typeOf(\"String\");\nvar isRegExp = typeOf(\"RegExp\");\nvar isObject = typeOf(\"Object\");\nvar isFunction = typeOf(\"Function\");\n\nfunction each(object, factory) {\n  for (var i = 0, l = object.length; i < l; i++) {\n    if (factory.call(object, object[i], i) === false) {\n      break;\n    }\n  }\n}\n\n// UserAgent Detector.\n// @param {String} ua, userAgent.\n// @param {Object} expression\n// @return {Object}\n//    返回 null 表示当前表达式未匹配成功。\nfunction detect(name, expression, ua) {\n  var expr = isFunction(expression) ? expression.call(null, ua) : expression;\n  if (!expr) {\n    return null;\n  }\n  var info = {\n    name: name,\n    version: NA_VERSION,\n    codename: \"\"\n  };\n  if (expr === true) {\n    return info;\n  } else if (isString(expr)) {\n    if (ua.indexOf(expr) !== -1) {\n      return info;\n    }\n  } else if (isObject(expr)) {\n    if (expr.hasOwnProperty(\"version\")) {\n      info.version = expr.version;\n    }\n    return info;\n  } else if (isRegExp(expr)) {\n    var m = expr.exec(ua);\n    if (m) {\n      if (m.length >= 2 && m[1]) {\n        info.version = m[1].replace(/_/g, \".\");\n      } else {\n        info.version = NA_VERSION;\n      }\n      return info;\n    }\n  }\n}\n\n// 初始化识别。\nfunction init(ua, patterns, factory, detector) {\n  var detected = NA;\n  each(patterns, function (pattern) {\n    var d = detect(pattern[0], pattern[1], ua);\n    if (d) {\n      detected = d;\n      return false;\n    }\n  });\n  factory.call(detector, detected.name, detected.version);\n}\n\nvar Detector = function () {\n  function Detector(rules) {\n    _classCallCheck(this, Detector);\n\n    this._rules = rules;\n  }\n\n  // 解析 UserAgent 字符串\n  // @param {String} ua, userAgent string.\n  // @return {Object}\n\n\n  _createClass(Detector, [{\n    key: \"parse\",\n    value: function parse(ua) {\n      ua = (ua || \"\").toLowerCase();\n      var d = {};\n\n      init(ua, this._rules.device, function (name, version) {\n        var v = parseFloat(version);\n        d.device = {\n          name: name,\n          version: v,\n          fullVersion: version\n        };\n        d.device[name] = v;\n      }, d);\n\n      init(ua, this._rules.os, function (name, version) {\n        var v = parseFloat(version);\n        d.os = {\n          name: name,\n          version: v,\n          fullVersion: version\n        };\n        d.os[name] = v;\n      }, d);\n\n      var ieCore = this.IEMode(ua);\n\n      init(ua, this._rules.engine, function (name, version) {\n        var mode = version;\n        // IE 内核的浏览器，修复版本号及兼容模式。\n        if (ieCore) {\n          version = ieCore.engineVersion || ieCore.engineMode;\n          mode = ieCore.engineMode;\n        }\n        var v = parseFloat(version);\n        d.engine = {\n          name: name,\n          version: v,\n          fullVersion: version,\n          mode: parseFloat(mode),\n          fullMode: mode,\n          compatible: ieCore ? ieCore.compatible : false\n        };\n        d.engine[name] = v;\n      }, d);\n\n      init(ua, this._rules.browser, function (name, version) {\n        var mode = version;\n        // IE 内核的浏览器，修复浏览器版本及兼容模式。\n        if (ieCore) {\n          // 仅修改 IE 浏览器的版本，其他 IE 内核的版本不修改。\n          if (name === \"ie\") {\n            version = ieCore.browserVersion;\n          }\n          mode = ieCore.browserMode;\n        }\n        var v = parseFloat(version);\n        d.browser = {\n          name: name,\n          version: v,\n          fullVersion: version,\n          mode: parseFloat(mode),\n          fullMode: mode,\n          compatible: ieCore ? ieCore.compatible : false\n        };\n        d.browser[name] = v;\n      }, d);\n      return d;\n    }\n\n    // 解析使用 Trident 内核的浏览器的 `浏览器模式` 和 `文档模式` 信息。\n    // @param {String} ua, userAgent string.\n    // @return {Object}\n\n  }, {\n    key: \"IEMode\",\n    value: function IEMode(ua) {\n      if (!this._rules.re_msie.test(ua)) {\n        return null;\n      }\n\n      var m = void 0;\n      var engineMode = void 0;\n      var engineVersion = void 0;\n      var browserMode = void 0;\n      var browserVersion = void 0;\n\n      // IE8 及其以上提供有 Trident 信息，\n      // 默认的兼容模式，UA 中 Trident 版本不发生变化。\n      if (ua.indexOf(\"trident/\") !== -1) {\n        m = /\\btrident\\/([0-9.]+)/.exec(ua);\n        if (m && m.length >= 2) {\n          // 真实引擎版本。\n          engineVersion = m[1];\n          var v_version = m[1].split(\".\");\n          v_version[0] = parseInt(v_version[0], 10) + 4;\n          browserVersion = v_version.join(\".\");\n        }\n      }\n\n      m = this._rules.re_msie.exec(ua);\n      browserMode = m[1];\n      var v_mode = m[1].split(\".\");\n      if (typeof browserVersion === \"undefined\") {\n        browserVersion = browserMode;\n      }\n      v_mode[0] = parseInt(v_mode[0], 10) - 4;\n      engineMode = v_mode.join(\".\");\n      if (typeof engineVersion === \"undefined\") {\n        engineVersion = engineMode;\n      }\n\n      return {\n        browserVersion: browserVersion,\n        browserMode: browserMode,\n        engineVersion: engineVersion,\n        engineMode: engineMode,\n        compatible: engineVersion !== engineMode\n      };\n    }\n  }]);\n\n  return Detector;\n}();\n\nmodule.exports = Detector;","/home/travis/build/npmtest/node-npmtest-detector/node_modules/detector/web/web-rules.js":"\"use strict\";\n\nvar win = typeof window === \"undefined\" ? global : window;\nvar external = win.external;\nvar re_msie = /\\b(?:msie |ie |trident\\/[0-9].*rv[ :])([0-9.]+)/;\nvar re_blackberry_10 = /\\bbb10\\b.+?\\bversion\\/([\\d.]+)/;\nvar re_blackberry_6_7 = /\\bblackberry\\b.+\\bversion\\/([\\d.]+)/;\nvar re_blackberry_4_5 = /\\bblackberry\\d+\\/([\\d.]+)/;\n\nvar NA_VERSION = \"-1\";\n\n// 硬件设备信息识别表达式。\n// 使用数组可以按优先级排序。\nvar DEVICES = [[\"nokia\", function (ua) {\n  // 不能将两个表达式合并，因为可能出现 \"nokia; nokia 960\"\n  // 这种情况下会优先识别出 nokia/-1\n  if (ua.indexOf(\"nokia \") !== -1) {\n    return (/\\bnokia ([0-9]+)?/\n    );\n  } else {\n    return (/\\bnokia([a-z0-9]+)?/\n    );\n  }\n}],\n// 三星有 Android 和 WP 设备。\n[\"samsung\", function (ua) {\n  if (ua.indexOf(\"samsung\") !== -1) {\n    return (/\\bsamsung(?:[ \\-](?:sgh|gt|sm))?-([a-z0-9]+)/\n    );\n  } else {\n    return (/\\b(?:sgh|sch|gt|sm)-([a-z0-9]+)/\n    );\n  }\n}], [\"wp\", function (ua) {\n  return ua.indexOf(\"windows phone \") !== -1 || ua.indexOf(\"xblwp\") !== -1 || ua.indexOf(\"zunewp\") !== -1 || ua.indexOf(\"windows ce\") !== -1;\n}], [\"pc\", \"windows\"], [\"ipad\", \"ipad\"],\n// ipod 规则应置于 iphone 之前。\n[\"ipod\", \"ipod\"], [\"iphone\", /\\biphone\\b|\\biph(\\d)/], [\"mac\", \"macintosh\"],\n// 小米\n[\"mi\", /\\bmi[ \\-]?([a-z0-9 ]+(?= build|\\)))/],\n// 红米\n[\"hongmi\", /\\bhm[ \\-]?([a-z0-9]+)/], [\"aliyun\", /\\baliyunos\\b(?:[\\-](\\d+))?/], [\"meizu\", function (ua) {\n  return ua.indexOf(\"meizu\") >= 0 ? /\\bmeizu[\\/ ]([a-z0-9]+)\\b/ : /\\bm([0-9cx]{1,4})\\b/;\n}], [\"nexus\", /\\bnexus ([0-9s.]+)/], [\"huawei\", function (ua) {\n  var re_mediapad = /\\bmediapad (.+?)(?= build\\/huaweimediapad\\b)/;\n  if (ua.indexOf(\"huawei-huawei\") !== -1) {\n    return (/\\bhuawei\\-huawei\\-([a-z0-9\\-]+)/\n    );\n  } else if (re_mediapad.test(ua)) {\n    return re_mediapad;\n  } else {\n    return (/\\bhuawei[ _\\-]?([a-z0-9]+)/\n    );\n  }\n}], [\"lenovo\", function (ua) {\n  if (ua.indexOf(\"lenovo-lenovo\") !== -1) {\n    return (/\\blenovo\\-lenovo[ \\-]([a-z0-9]+)/\n    );\n  } else {\n    return (/\\blenovo[ \\-]?([a-z0-9]+)/\n    );\n  }\n}],\n// 中兴\n[\"zte\", function (ua) {\n  if (/\\bzte\\-[tu]/.test(ua)) {\n    return (/\\bzte-[tu][ _\\-]?([a-su-z0-9\\+]+)/\n    );\n  } else {\n    return (/\\bzte[ _\\-]?([a-su-z0-9\\+]+)/\n    );\n  }\n}],\n// 步步高\n[\"vivo\", /\\bvivo(?: ([a-z0-9]+))?/], [\"htc\", function (ua) {\n  if (/\\bhtc[a-z0-9 _\\-]+(?= build\\b)/.test(ua)) {\n    return (/\\bhtc[ _\\-]?([a-z0-9 ]+(?= build))/\n    );\n  } else {\n    return (/\\bhtc[ _\\-]?([a-z0-9 ]+)/\n    );\n  }\n}], [\"oppo\", /\\boppo[_]([a-z0-9]+)/], [\"konka\", /\\bkonka[_\\-]([a-z0-9]+)/], [\"sonyericsson\", /\\bmt([a-z0-9]+)/], [\"coolpad\", /\\bcoolpad[_ ]?([a-z0-9]+)/], [\"lg\", /\\blg[\\-]([a-z0-9]+)/], [\"android\", /\\bandroid\\b|\\badr\\b/], [\"blackberry\", function (ua) {\n  if (ua.indexOf(\"blackberry\") >= 0) {\n    return (/\\bblackberry\\s?(\\d+)/\n    );\n  }\n  return \"bb10\";\n}]];\n\n// 操作系统信息识别表达式\nvar OS = [[\"wp\", function (ua) {\n  if (ua.indexOf(\"windows phone \") !== -1) {\n    return (/\\bwindows phone (?:os )?([0-9.]+)/\n    );\n  } else if (ua.indexOf(\"xblwp\") !== -1) {\n    return (/\\bxblwp([0-9.]+)/\n    );\n  } else if (ua.indexOf(\"zunewp\") !== -1) {\n    return (/\\bzunewp([0-9.]+)/\n    );\n  }\n  return \"windows phone\";\n}], [\"windows\", /\\bwindows nt ([0-9.]+)/], [\"macosx\", /\\bmac os x ([0-9._]+)/], [\"ios\", function (ua) {\n  if (/\\bcpu(?: iphone)? os /.test(ua)) {\n    return (/\\bcpu(?: iphone)? os ([0-9._]+)/\n    );\n  } else if (ua.indexOf(\"iph os \") !== -1) {\n    return (/\\biph os ([0-9_]+)/\n    );\n  } else {\n    return (/\\bios\\b/\n    );\n  }\n}], [\"yunos\", /\\baliyunos ([0-9.]+)/], [\"android\", function (ua) {\n  if (ua.indexOf(\"android\") >= 0) {\n    return (/\\bandroid[ \\/-]?([0-9.x]+)?/\n    );\n  } else if (ua.indexOf(\"adr\") >= 0) {\n    if (ua.indexOf(\"mqqbrowser\") >= 0) {\n      return (/\\badr[ ]\\(linux; u; ([0-9.]+)?/\n      );\n    } else {\n      return (/\\badr(?:[ ]([0-9.]+))?/\n      );\n    }\n  }\n  return \"android\";\n  //return /\\b(?:android|\\badr)(?:[\\/\\- ](?:\\(linux; u; )?)?([0-9.x]+)?/;\n}], [\"chromeos\", /\\bcros i686 ([0-9.]+)/], [\"linux\", \"linux\"], [\"windowsce\", /\\bwindows ce(?: ([0-9.]+))?/], [\"symbian\", /\\bsymbian(?:os)?\\/([0-9.]+)/], [\"blackberry\", function (ua) {\n  var m = ua.match(re_blackberry_10) || ua.match(re_blackberry_6_7) || ua.match(re_blackberry_4_5);\n  return m ? { version: m[1] } : \"blackberry\";\n}]];\n\n// 针对同源的 TheWorld 和 360 的 external 对象进行检测。\n// @param {String} key, 关键字，用于检测浏览器的安装路径中出现的关键字。\n// @return {Undefined,Boolean,Object} 返回 undefined 或 false 表示检测未命中。\nfunction checkTW360External(key) {\n  if (!external) {\n    return;\n  } // return undefined.\n  try {\n    //        360安装路径：\n    //        C:%5CPROGRA~1%5C360%5C360se3%5C360SE.exe\n    var runpath = external.twGetRunPath.toLowerCase();\n    // 360SE 3.x ~ 5.x support.\n    // 暴露的 external.twGetVersion 和 external.twGetSecurityID 均为 undefined。\n    // 因此只能用 try/catch 而无法使用特性判断。\n    var security = external.twGetSecurityID(win);\n    var version = external.twGetVersion(security);\n\n    if (runpath && runpath.indexOf(key) === -1) {\n      return false;\n    }\n    if (version) {\n      return { version: version };\n    }\n  } catch (ex) {/* */}\n}\n\nvar ENGINE = [[\"edgehtml\", /edge\\/([0-9.]+)/], [\"trident\", re_msie], [\"blink\", function () {\n  return \"chrome\" in win && \"CSS\" in win && /\\bapplewebkit[\\/]?([0-9.+]+)/;\n}], [\"webkit\", /\\bapplewebkit[\\/]?([0-9.+]+)/], [\"gecko\", function (ua) {\n  var match = ua.match(/\\brv:([\\d\\w.]+).*\\bgecko\\/(\\d+)/);\n  if (match) {\n    return {\n      version: match[1] + \".\" + match[2]\n    };\n  }\n}], [\"presto\", /\\bpresto\\/([0-9.]+)/], [\"androidwebkit\", /\\bandroidwebkit\\/([0-9.]+)/], [\"coolpadwebkit\", /\\bcoolpadwebkit\\/([0-9.]+)/], [\"u2\", /\\bu2\\/([0-9.]+)/], [\"u3\", /\\bu3\\/([0-9.]+)/]];\nvar BROWSER = [\n// Microsoft Edge Browser, Default browser in Windows 10.\n[\"edge\", /edge\\/([0-9.]+)/],\n// Sogou.\n[\"sogou\", function (ua) {\n  if (ua.indexOf(\"sogoumobilebrowser\") >= 0) {\n    return (/sogoumobilebrowser\\/([0-9.]+)/\n    );\n  } else if (ua.indexOf(\"sogoumse\") >= 0) {\n    return true;\n  }\n  return (/ se ([0-9.x]+)/\n  );\n}],\n// TheWorld (世界之窗)\n// 由于裙带关系，TheWorld API 与 360 高度重合。\n// 只能通过 UA 和程序安装路径中的应用程序名来区分。\n// TheWorld 的 UA 比 360 更靠谱，所有将 TheWorld 的规则放置到 360 之前。\n[\"theworld\", function () {\n  var x = checkTW360External(\"theworld\");\n  if (typeof x !== \"undefined\") {\n    return x;\n  }\n  return (/theworld(?: ([\\d.])+)?/\n  );\n}],\n// 360SE, 360EE.\n[\"360\", function (ua) {\n  var x = checkTW360External(\"360se\");\n  if (typeof x !== \"undefined\") {\n    return x;\n  }\n  if (ua.indexOf(\"360 aphone browser\") !== -1) {\n    return (/\\b360 aphone browser \\(([^\\)]+)\\)/\n    );\n  }\n  return (/\\b360(?:se|ee|chrome|browser)\\b/\n  );\n}],\n// Maxthon\n[\"maxthon\", function () {\n  try {\n    if (external && (external.mxVersion || external.max_version)) {\n      return {\n        version: external.mxVersion || external.max_version\n      };\n    }\n  } catch (ex) {/* */}\n  return (/\\b(?:maxthon|mxbrowser)(?:[ \\/]([0-9.]+))?/\n  );\n}], [\"micromessenger\", /\\bmicromessenger\\/([\\d.]+)/], [\"qq\", /\\bm?qqbrowser\\/([0-9.]+)/], [\"green\", \"greenbrowser\"], [\"tt\", /\\btencenttraveler ([0-9.]+)/], [\"liebao\", function (ua) {\n  if (ua.indexOf(\"liebaofast\") >= 0) {\n    return (/\\bliebaofast\\/([0-9.]+)/\n    );\n  }\n  if (ua.indexOf(\"lbbrowser\") === -1) {\n    return false;\n  }\n  var version = void 0;\n  try {\n    if (external && external.LiebaoGetVersion) {\n      version = external.LiebaoGetVersion();\n    }\n  } catch (ex) {/* */}\n  return {\n    version: version || NA_VERSION\n  };\n}], [\"tao\", /\\btaobrowser\\/([0-9.]+)/], [\"coolnovo\", /\\bcoolnovo\\/([0-9.]+)/], [\"saayaa\", \"saayaa\"],\n// 有基于 Chromniun 的急速模式和基于 IE 的兼容模式。必须在 IE 的规则之前。\n[\"baidu\", /\\b(?:ba?idubrowser|baiduhd)[ \\/]([0-9.x]+)/],\n// 后面会做修复版本号，这里只要能识别是 IE 即可。\n[\"ie\", re_msie], [\"mi\", /\\bmiuibrowser\\/([0-9.]+)/],\n// Opera 15 之后开始使用 Chromniun 内核，需要放在 Chrome 的规则之前。\n[\"opera\", function (ua) {\n  var re_opera_old = /\\bopera.+version\\/([0-9.ab]+)/;\n  var re_opera_new = /\\bopr\\/([0-9.]+)/;\n  return re_opera_old.test(ua) ? re_opera_old : re_opera_new;\n}], [\"oupeng\", /\\boupeng\\/([0-9.]+)/], [\"yandex\", /yabrowser\\/([0-9.]+)/],\n// 支付宝手机客户端\n[\"ali-ap\", function (ua) {\n  if (ua.indexOf(\"aliapp\") > 0) {\n    return (/\\baliapp\\(ap\\/([0-9.]+)\\)/\n    );\n  } else {\n    return (/\\balipayclient\\/([0-9.]+)\\b/\n    );\n  }\n}],\n// 支付宝平板客户端\n[\"ali-ap-pd\", /\\baliapp\\(ap-pd\\/([0-9.]+)\\)/],\n// 支付宝商户客户端\n[\"ali-am\", /\\baliapp\\(am\\/([0-9.]+)\\)/],\n// 淘宝手机客户端\n[\"ali-tb\", /\\baliapp\\(tb\\/([0-9.]+)\\)/],\n// 淘宝平板客户端\n[\"ali-tb-pd\", /\\baliapp\\(tb-pd\\/([0-9.]+)\\)/],\n// 天猫手机客户端\n[\"ali-tm\", /\\baliapp\\(tm\\/([0-9.]+)\\)/],\n// 天猫平板客户端\n[\"ali-tm-pd\", /\\baliapp\\(tm-pd\\/([0-9.]+)\\)/],\n// UC 浏览器，可能会被识别为 Android 浏览器，规则需要前置。\n// UC 桌面版浏览器携带 Chrome 信息，需要放在 Chrome 之前。\n[\"uc\", function (ua) {\n  if (ua.indexOf(\"ucbrowser/\") >= 0) {\n    return (/\\bucbrowser\\/([0-9.]+)/\n    );\n  } else if (ua.indexOf(\"ubrowser/\") >= 0) {\n    return (/\\bubrowser\\/([0-9.]+)/\n    );\n  } else if (/\\buc\\/[0-9]/.test(ua)) {\n    return (/\\buc\\/([0-9.]+)/\n    );\n  } else if (ua.indexOf(\"ucweb\") >= 0) {\n    // `ucweb/2.0` is compony info.\n    // `UCWEB8.7.2.214/145/800` is browser info.\n    return (/\\bucweb([0-9.]+)?/\n    );\n  } else {\n    return (/\\b(?:ucbrowser|uc)\\b/\n    );\n  }\n}], [\"chrome\", / (?:chrome|crios|crmo)\\/([0-9.]+)/],\n// Android 默认浏览器。该规则需要在 safari 之前。\n[\"android\", function (ua) {\n  if (ua.indexOf(\"android\") === -1) {\n    return;\n  }\n  return (/\\bversion\\/([0-9.]+(?: beta)?)/\n  );\n}], [\"blackberry\", function (ua) {\n  var m = ua.match(re_blackberry_10) || ua.match(re_blackberry_6_7) || ua.match(re_blackberry_4_5);\n  return m ? { version: m[1] } : \"blackberry\";\n}], [\"safari\", /\\bversion\\/([0-9.]+(?: beta)?)(?: mobile(?:\\/[a-z0-9]+)?)? safari\\//],\n// 如果不能被识别为 Safari，则猜测是 WebView。\n[\"webview\", /\\bcpu(?: iphone)? os (?:[0-9._]+).+\\bapplewebkit\\b/], [\"firefox\", /\\bfirefox\\/([0-9.ab]+)/], [\"nokia\", /\\bnokiabrowser\\/([0-9.]+)/]];\n\nmodule.exports = {\n  device: DEVICES,\n  os: OS,\n  browser: BROWSER,\n  engine: ENGINE,\n  re_msie: re_msie\n};"}